#!/usr/bin/env python
from logging import log
import os
import signal
import time
import sys
import subprocess
import multiprocessing
from app.utils import get_logger

"""
Structure docker container folder:
    /opt/ml
        /code
            (user_code)
            /src
        /model
            (model_artifacts)
            224_mvp.pt
            mobilenetv3.pt
"""

# logger
logger = get_logger(name="start_server_thread")
# GET cpu cores
CPU_COUNT = multiprocessing.cpu_count()
#Â SET numbers of worker and timeouts
MODEL_SERVER_TIMEOUT = os.environ.get("MODEL_SERVER_TIMEOUT", 10)
MODEL_SERVER_WORKERS = os.environ.get("MODEL_SERVER_WORKERS", CPU_COUNT//2)

def sigterm_handler(signum, frame, gunicorn_pid):
    logger.info(f"{signum}, {frame}, {gunicorn_pid}")
    # os.kill(gunicorn_pid, signal.SIGTERM)
    raise Exception(f"{signum}, {frame}, {gunicorn_pid}")

def start_server():
    """Start Inference Server.
    """
    logger.info("Starting inference Server with {} workers".format(CPU_COUNT))
    
    # link the log streams to stdout/err so they will be logged to the container logs
    # subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    # subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])
    
    # nginx process start up
    
    # gunicorn process start up
    gunicorn_pid = subprocess.Popen(['gunicorn',
                                 '--timeout', str(MODEL_SERVER_TIMEOUT),
                                 '-k', 'uvicorn.workers.UvicornWorker',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(MODEL_SERVER_WORKERS),
                                 'wsgi:app',
                                 '--log-level', 'DEBUG'])
    logger.info("Gunicorn started with pid: " + str(gunicorn_pid))
    
    # execute function kill process when SIGTERM is received.
    signal.signal(signal.SIGTERM,
                  lambda signum, frame: sigterm_handler(signum, frame, gunicorn_pid))
    

if __name__ == "__main__":
    start_server()