#!/usr/bin/env python
import os
import signal
import time
import sys
import subprocess
import multiprocessing
from app.utils import get_logger

"""
Structure docker container folder:
    /opt/ml
        /code
            (user_code)
            /src
        /model
            (model_artifacts)
            224_mvp.pt
            mobilenetv3.pt
"""

# logger
logger = get_logger(name="start_server_thread")
# GET cpu cores
CPU_COUNT = multiprocessing.cpu_count()
#Â SET numbers of worker and timeouts
MODEL_SERVER_TIMEOUT = os.environ.get("MODEL_SERVER_TIMEOUT", 10)
MODEL_SERVER_WORKERS = os.environ.get("MODEL_SERVER_WORKERS", CPU_COUNT//2)

def sigterm_handler(gunicorn_pid:int, nginx_pid:int) -> None:
    """ Handling sigterm handler when this program pid receive a SIGTERM
    signal. If this happen we need to close all childs pids. That means
    gunicorn and nginx pid.
    
    Args:
        gunicorn_pid (int): pid for gunicorn child process.
        nginx_pid (int): pid for nginx child process.
    """
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError as error:
        logger.info(f"Nginx pid was already close! {error}")
        
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError as error:
        logger.info(f"Gunicorn pid was already close! {error}")
        
    # exit process with no erros to tell sagemaker all is good.
    sys.exit(0)

def start_server():
    """Start Inference Server.
    """
    logger.info("Starting inference  Server with pid {} and with {} num of workers".format(os.getpid(), CPU_COUNT))
    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])
    
    # nginx process start up
    nginx = subprocess.Popen(['nginx', '-c', '/opt/ml/input/config/nginx.conf'])
    
    # gunicorn process start up
    gunicorn = subprocess.Popen(['gunicorn',
                                 '--timeout', str(MODEL_SERVER_TIMEOUT),
                                 '-k', 'uvicorn.workers.UvicornWorker',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(MODEL_SERVER_WORKERS),
                                 'wsgi:app',
                                 '--log-level', 'INFO'])
                                 
    logger.info("Gunicorn started with pid: " + str(gunicorn.pid))
    logger.info("Nginx started with pid: " + str(nginx.pid))
    
    # add sigterm handler function process when SIGTERM is received.
    signal.signal(signal.SIGTERM,
                  lambda signum, frame: sigterm_handler(gunicorn.pid, nginx.pid))
    
    # set of pids
    pids_to_process_name = {gunicorn.pid: "gunicorn_process", nginx.pid: "nginx_process"}
    while True:
        # if either of the process exits, exit the whole program.
        pid, _ = os.wait()
        if pid in pids_to_process_name.keys():
            logger.info(f"{pids_to_process_name[pid]} with pid: {pid} was exited!")
            break
            
    # Before exiting the whole program exit the remaining childs process
    sigterm_handler(gunicorn.pid, nginx.pid)
    
    logger.info("Inference server exiting!")

if __name__ == "__main__":
    start_server()